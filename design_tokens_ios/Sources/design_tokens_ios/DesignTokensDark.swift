
//
// DesignTokensDark.swift
//

// Do not edit directly
// Generated on Fri, 11 Nov 2022 13:16:13 GMT


import SwiftUI

public enum DesignTokensDark {
    public static let actionChipSizeLargeDefaultContainerCompositionBorderRadius = 999
    public static let actionChipSizeLargeDefaultContainerCompositionBorderWidth = 1
    public static let actionChipSizeLargeDefaultContainerCompositionHeight = 40
    public static let actionChipSizeLargeDefaultContainerCompositionHorizontalPadding = 16
    public static let actionChipSizeLargeDefaultContainerCompositionItemSpacing = 8
    public static let actionChipSizeLargeDefaultLabelCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let actionChipSizeLargeWithDismissContainerCompositionBorderRadius = 999
    public static let actionChipSizeLargeWithDismissContainerCompositionBorderWidth = 1
    public static let actionChipSizeLargeWithDismissContainerCompositionHeight = 40
    public static let actionChipSizeLargeWithDismissContainerCompositionItemSpacing = 8
    public static let actionChipSizeLargeWithDismissContainerCompositionPaddingLeft = 16
    public static let actionChipSizeLargeWithDismissContainerCompositionPaddingRight = 12
    public static let actionChipSizeLargeWithIconAndDismissContainerCompositionBorderRadius = 999
    public static let actionChipSizeLargeWithIconAndDismissContainerCompositionBorderWidth = 1
    public static let actionChipSizeLargeWithIconAndDismissContainerCompositionHeight = 40
    public static let actionChipSizeLargeWithIconAndDismissContainerCompositionHorizontalPadding = 12
    public static let actionChipSizeLargeWithIconAndDismissContainerCompositionItemSpacing = 8
    public static let actionChipSizeLargeWithIconContainerCompositionBorderRadius = 999
    public static let actionChipSizeLargeWithIconContainerCompositionBorderWidth = 1
    public static let actionChipSizeLargeWithIconContainerCompositionHeight = 40
    public static let actionChipSizeLargeWithIconContainerCompositionItemSpacing = 8
    public static let actionChipSizeLargeWithIconContainerCompositionPaddingLeft = 12
    public static let actionChipSizeLargeWithIconContainerCompositionPaddingRight = 16
    public static let actionChipSizeMediumDefaultContainerCompositionBorderRadius = 999
    public static let actionChipSizeMediumDefaultContainerCompositionBorderWidth = 1
    public static let actionChipSizeMediumDefaultContainerCompositionHeight = 32
    public static let actionChipSizeMediumDefaultContainerCompositionHorizontalPadding = 12
    public static let actionChipSizeMediumDefaultLabelCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let actionChipSizeMediumWithDismissContainerCompositionBorderRadius = 999
    public static let actionChipSizeMediumWithDismissContainerCompositionBorderWidth = 1
    public static let actionChipSizeMediumWithDismissContainerCompositionHeight = 32
    public static let actionChipSizeMediumWithDismissContainerCompositionItemSpacing = 8
    public static let actionChipSizeMediumWithDismissContainerCompositionPaddingLeft = 12
    public static let actionChipSizeMediumWithDismissContainerCompositionPaddingRight = 8
    public static let actionChipSizeMediumWithIconAndDismissContainerCompositionBorderRadius = 999
    public static let actionChipSizeMediumWithIconAndDismissContainerCompositionBorderWidth = 1
    public static let actionChipSizeMediumWithIconAndDismissContainerCompositionHeight = 32
    public static let actionChipSizeMediumWithIconAndDismissContainerCompositionHorizontalPadding = 8
    public static let actionChipSizeMediumWithIconAndDismissContainerCompositionItemSpacing = 8
    public static let actionChipSizeMediumWithIconContainerCompositionBorderRadius = 999
    public static let actionChipSizeMediumWithIconContainerCompositionBorderWidth = 1
    public static let actionChipSizeMediumWithIconContainerCompositionHeight = 32
    public static let actionChipSizeMediumWithIconContainerCompositionItemSpacing = 8
    public static let actionChipSizeMediumWithIconContainerCompositionPaddingLeft = 8
    public static let actionChipSizeMediumWithIconContainerCompositionPaddingRight = 12
    public static let actionChipVariantDefaultStateActiveContainerBackgroundColor = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let actionChipVariantDefaultStateActiveContainerBorderColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let actionChipVariantDefaultStateEnabledContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let actionChipVariantDefaultStateEnabledContainerBorderColor = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let actionChipVariantDefaultStateEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let actionChipVariantDefaultStateHoverContainerBackgroundColor = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let actionChipVariantDefaultStateHoverContainerBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let borderRadiusActions = 4
    public static let borderRadiusM = 8
    public static let borderRadiusPill = 999
    public static let borderRadiusS = 4
    public static let borderRadiusSharp = 0
    public static let borderWidthEmphasisHigh = 1 * 3
    public static let borderWidthEmphasisLow = 1 * 1
    public static let borderWidthEmphasisMedium = 1 * 2
    public static let boxShadowBase = BoxShadow(x: 0, y: 2, blur: 4, spread: 0, color: Color(red: 0.020, green: 0.035, blue: 0.078, opacity: 1).opacity(0.12))
    public static let boxShadowElevated = [BoxShadow(x: 0, y: 4, blur: 8, spread: 0, color: Color(red: 0.020, green: 0.035, blue: 0.078, opacity: 1).opacity(0.04)), BoxShadow(x: 0, y: 12, blur: 20, spread: 0, color: Color(red: 0.020, green: 0.035, blue: 0.078, opacity: 1).opacity(0.08))]
    public static let buttonSizeLCompositionBorderRadius = 4
    public static let buttonSizeLCompositionBorderWidth = 1 * 1
    public static let buttonSizeLCompositionHeight = 48
    public static let buttonSizeLCompositionHorizontalPadding = 20
    public static let buttonSizeLCompositionSpacing = 8
    public static let buttonSizeLCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 17)
    public static let buttonSizeMCompositionBorderRadius = 4
    public static let buttonSizeMCompositionBorderWidth = 1 * 1
    public static let buttonSizeMCompositionHeight = 44
    public static let buttonSizeMCompositionHorizontalPadding = 20
    public static let buttonSizeMCompositionSpacing = 8
    public static let buttonSizeMCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let buttonSizeSCompositionBorderRadius = 4
    public static let buttonSizeSCompositionBorderWidth = 1 * 1
    public static let buttonSizeSCompositionHeight = 32
    public static let buttonSizeSCompositionHorizontalPadding = 16
    public static let buttonSizeSCompositionSpacing = 4
    public static let buttonSizeSCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 12, fontSize: 13)
    public static let buttonVariantDestructiveStateActiveBackgroundColor = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let buttonVariantDestructiveStateActiveBorderColor = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let buttonVariantDestructiveStateActiveContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantDestructiveStateDisabledBackgroundColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantDestructiveStateDisabledBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let buttonVariantDestructiveStateDisabledContentColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantDestructiveStateEnabledBackgroundColor = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let buttonVariantDestructiveStateEnabledBorderColor = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let buttonVariantDestructiveStateEnabledContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantDestructiveStateHoverBackgroundColor = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let buttonVariantDestructiveStateHoverBorderColor = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let buttonVariantDestructiveStateHoverContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantDestructiveStateLoadingBackgroundColor = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let buttonVariantDestructiveStateLoadingBorderColor = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let buttonVariantDestructiveStateLoadingContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantPrimaryStateActiveBackgroundColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantPrimaryStateActiveBorderColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantPrimaryStateActiveContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantPrimaryStateDisabledBackgroundColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantPrimaryStateDisabledBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let buttonVariantPrimaryStateDisabledContentColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantPrimaryStateEnabledBackgroundColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantPrimaryStateEnabledBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantPrimaryStateEnabledContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantPrimaryStateEnabledScale = 1.5
    public static let buttonVariantPrimaryStateHoverBackgroundColor = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let buttonVariantPrimaryStateHoverBorderColor = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let buttonVariantPrimaryStateHoverContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantPrimaryStateHoverScale = 1.5
    public static let buttonVariantPrimaryStateLoadingBackgroundColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantPrimaryStateLoadingBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantPrimaryStateLoadingContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantSecondaryStateActiveBackgroundColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantSecondaryStateActiveBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantSecondaryStateActiveContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantSecondaryStateDisabledBackgroundColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantSecondaryStateDisabledBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let buttonVariantSecondaryStateDisabledContentColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantSecondaryStateEnabledBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantSecondaryStateEnabledBorderColor = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let buttonVariantSecondaryStateEnabledContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantSecondaryStateHoverBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantSecondaryStateHoverBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantSecondaryStateHoverContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantSecondaryStateLoadingBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantSecondaryStateLoadingBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let buttonVariantSecondaryStateLoadingContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateActiveBackgroundColor = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let buttonVariantTertiaryStateActiveBorderColor = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let buttonVariantTertiaryStateActiveContentColor = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateDisabledBackgroundColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantTertiaryStateDisabledBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let buttonVariantTertiaryStateDisabledContentColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let buttonVariantTertiaryStateEnabledBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateEnabledBorderColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateEnabledContentColor = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateHoverBackgroundColor = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let buttonVariantTertiaryStateHoverBorderColor = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let buttonVariantTertiaryStateHoverContentColor = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateLoadingBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateLoadingBorderColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let buttonVariantTertiaryStateLoadingContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardSizeDefaultContainerCompositionBorderRadius = 8
    public static let calloutCardSizeDefaultContainerCompositionBorderWidth = 1
    public static let calloutCardSizeDefaultContainerCompositionHorizontalPadding = 16
    public static let calloutCardSizeDefaultContainerCompositionVerticalPadding = 16
    public static let calloutCardSizeDefaultContentWrapperCompositionItemSpacing = 16
    public static let calloutCardSizeDefaultDescriptionCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 20, fontSize: 15)
    public static let calloutCardSizeDefaultTextWrapperCompositionItemSpacing = 0
    public static let calloutCardSizeDefaultTitleCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let calloutCardVariantErrorContainerBackground = Color(red: 0.549, green: 0.031, blue: 0.129, opacity: 1)
    public static let calloutCardVariantErrorContainerBorder = Color(red: 0.549, green: 0.031, blue: 0.129, opacity: 1)
    public static let calloutCardVariantErrorDescriptionTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardVariantErrorIconFill = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let calloutCardVariantErrorTitleTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardVariantPassiveContainerBackground = Color(red: 0.804, green: 0.894, blue: 1.000, opacity: 1)
    public static let calloutCardVariantPassiveContainerBorder = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let calloutCardVariantPassiveDescriptionTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardVariantPassiveIconFill = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let calloutCardVariantPassiveTitleTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardVariantSuccessContainerBackground = Color(red: 0.000, green: 0.380, blue: 0.255, opacity: 1)
    public static let calloutCardVariantSuccessContainerBorder = Color(red: 0.000, green: 0.380, blue: 0.255, opacity: 1)
    public static let calloutCardVariantSuccessDescriptionTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardVariantSuccessIconFill = Color(red: 0.651, green: 0.894, blue: 0.741, opacity: 1)
    public static let calloutCardVariantSuccessTitleTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardVariantWarningContainerBackground = Color(red: 0.541, green: 0.345, blue: 0.051, opacity: 1)
    public static let calloutCardVariantWarningContainerBorder = Color(red: 0.541, green: 0.345, blue: 0.051, opacity: 1)
    public static let calloutCardVariantWarningDescriptionTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let calloutCardVariantWarningIconFill = Color(red: 1.000, green: 0.678, blue: 0.482, opacity: 1)
    public static let calloutCardVariantWarningTitleTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxSizeDefaultCheckmarkCompositionSizing = 20
    public static let checkboxSizeDefaultContainerCompositionItemSpacing = 12
    public static let checkboxSizeDefaultContentWrapperCompositionVerticalPadding = 2
    public static let checkboxSizeDefaultDescriptionCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 16, fontSize: 15)
    public static let checkboxSizeDefaultLabelWrapperCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 20, fontSize: 15)
    public static let checkboxSizeDefaultPrimitiveCompositionBorderRadius = 4
    public static let checkboxSizeDefaultPrimitiveCompositionBorderWidth = 1
    public static let checkboxSizeDefaultPrimitiveCompositionSizing = 24
    public static let checkboxVariantIndeterminateStateActiveCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateActivePrimitiveBackground = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let checkboxVariantIndeterminateStateActivePrimitiveBorder = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let checkboxVariantIndeterminateStateDisabledCheckmarkBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantIndeterminateStateDisabledDescriptionTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantIndeterminateStateDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantIndeterminateStateDisabledPrimitiveBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantIndeterminateStateDisabledPrimitiveBorder = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let checkboxVariantIndeterminateStateEnabledCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateEnabledDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantIndeterminateStateEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateEnabledPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateEnabledPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorActiveCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorActiveDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorActiveLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorActivePrimitiveBackground = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorActivePrimitiveBorder = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorHoverCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorHoverDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorHoverLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorHoverPrimitiveBackground = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorHoverPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorPrimitiveBackground = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantIndeterminateStateErrorPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantIndeterminateStateHoverCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateHoverPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let checkboxVariantIndeterminateStateHoverPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateActiveCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateActivePrimitiveBackground = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let checkboxVariantSelectedStateActivePrimitiveBorder = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let checkboxVariantSelectedStateDisabledCheckmarkBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantSelectedStateDisabledDescriptionTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantSelectedStateDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantSelectedStateDisabledPrimitiveBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantSelectedStateDisabledPrimitiveBorder = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let checkboxVariantSelectedStateEnabledCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateEnabledDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantSelectedStateEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateEnabledPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateEnabledPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateErrorActiveCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateErrorActiveDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantSelectedStateErrorActiveLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateErrorActivePrimitiveBackground = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let checkboxVariantSelectedStateErrorActivePrimitiveBorder = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let checkboxVariantSelectedStateErrorCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateErrorDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantSelectedStateErrorHoverCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateErrorHoverDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantSelectedStateErrorHoverLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateErrorHoverPrimitiveBackground = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantSelectedStateErrorHoverPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantSelectedStateErrorLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateErrorPrimitiveBackground = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantSelectedStateErrorPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantSelectedStateHoverCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateHoverPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let checkboxVariantSelectedStateHoverPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateActiveCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateActivePrimitiveBackground = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let checkboxVariantUnselectedStateActivePrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let checkboxVariantUnselectedStateDisabledCheckmarkBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantUnselectedStateDisabledDescriptionTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantUnselectedStateDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantUnselectedStateDisabledPrimitiveBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let checkboxVariantUnselectedStateDisabledPrimitiveBorder = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let checkboxVariantUnselectedStateEnabledCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateEnabledDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let checkboxVariantUnselectedStateEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateEnabledPrimitiveBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateEnabledPrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorActiveCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorActivePrimitiveBackground = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorActivePrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorHoverCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorHoverPrimitiveBackground = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorHoverPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorPrimitiveBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateErrorPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let checkboxVariantUnselectedStateHoverCheckmarkBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let checkboxVariantUnselectedStateHoverPrimitiveBackground = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let checkboxVariantUnselectedStateHoverPrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let colorBackgroundAccent = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let colorBackgroundAccentActive = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let colorBackgroundAccentFaded = Color(red: 0.804, green: 0.894, blue: 1.000, opacity: 1)
    public static let colorBackgroundAccentFadedActive = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let colorBackgroundAccentFadedHover = Color(red: 0.506, green: 0.737, blue: 1.000, opacity: 1)
    public static let colorBackgroundAccentHover = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let colorBackgroundBase = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let colorBackgroundBaseActive = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let colorBackgroundBaseHover = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let colorBackgroundDanger = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let colorBackgroundDangerActive = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let colorBackgroundDangerFaded = Color(red: 0.549, green: 0.031, blue: 0.129, opacity: 1)
    public static let colorBackgroundDangerFadedActive = Color(red: 0.976, green: 0.624, blue: 0.651, opacity: 1)
    public static let colorBackgroundDangerFadedHover = Color(red: 0.953, green: 0.741, blue: 0.780, opacity: 1)
    public static let colorBackgroundDangerHover = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let colorBackgroundDisabled = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let colorBackgroundElevated = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let colorBackgroundElevatedActive = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let colorBackgroundElevatedHover = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let colorBackgroundInfo = Color(red: 0.310, green: 0.369, blue: 0.949, opacity: 1)
    public static let colorBackgroundInfoFaded = Color(red: 0.906, green: 0.925, blue: 0.996, opacity: 1)
    public static let colorBackgroundNeutral = Color(red: 0.910, green: 0.910, blue: 0.933, opacity: 1)
    public static let colorBackgroundNeutralActive = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let colorBackgroundNeutralFaded = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let colorBackgroundNeutralFadedActive = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let colorBackgroundNeutralFadedHover = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let colorBackgroundNeutralHover = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let colorBackgroundOverlay = Color(red: 0.702, green: 0.729, blue: 0.780, opacity: 1).opacity(0.4)
    public static let colorBackgroundPage = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let colorBackgroundPageFaded = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let colorBackgroundPositive = Color(red: 0.376, green: 0.761, blue: 0.565, opacity: 1)
    public static let colorBackgroundPositiveFaded = Color(red: 0.000, green: 0.380, blue: 0.255, opacity: 1)
    public static let colorBackgroundPrimary = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let colorBackgroundPrimaryActive = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let colorBackgroundPrimaryHover = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let colorBackgroundWarning = Color(red: 0.945, green: 0.569, blue: 0.004, opacity: 1)
    public static let colorBackgroundWarningFaded = Color(red: 0.541, green: 0.345, blue: 0.051, opacity: 1)
    public static let colorBorderAccent = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let colorBorderAccentActive = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let colorBorderAccentFaded = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let colorBorderAccentHover = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let colorBorderBase = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let colorBorderBaseActive = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let colorBorderBaseHover = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let colorBorderDanger = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let colorBorderDangerActive = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let colorBorderDangerFaded = Color(red: 0.549, green: 0.031, blue: 0.129, opacity: 1)
    public static let colorBorderDangerHover = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let colorBorderDisabled = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let colorBorderInfo = Color(red: 0.310, green: 0.369, blue: 0.949, opacity: 1)
    public static let colorBorderInfoFaded = Color(red: 0.847, green: 0.878, blue: 0.992, opacity: 1)
    public static let colorBorderNeutral = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let colorBorderNeutralActive = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let colorBorderNeutralFaded = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let colorBorderNeutralFadedActive = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let colorBorderNeutralFadedHover = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let colorBorderNeutralHover = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let colorBorderPositive = Color(red: 0.000, green: 0.639, blue: 0.427, opacity: 1)
    public static let colorBorderPositiveFaded = Color(red: 0.000, green: 0.380, blue: 0.255, opacity: 1)
    public static let colorBorderPrimary = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let colorBorderWarning = Color(red: 0.945, green: 0.569, blue: 0.004, opacity: 1)
    public static let colorBorderWarningFaded = Color(red: 0.541, green: 0.345, blue: 0.051, opacity: 1)
    public static let colorForegroundAccent = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let colorForegroundAccentActive = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let colorForegroundAccentHover = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let colorForegroundDanger = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let colorForegroundDangerActive = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let colorForegroundDangerHover = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let colorForegroundDisabled = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let colorForegroundGhost = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let colorForegroundInfo = Color(red: 0.310, green: 0.369, blue: 0.949, opacity: 1)
    public static let colorForegroundNeutral = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let colorForegroundNeutralFaded = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let colorForegroundOnInteractive = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let colorForegroundOnPrimary = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let colorForegroundPositive = Color(red: 0.651, green: 0.894, blue: 0.741, opacity: 1)
    public static let colorForegroundWarning = Color(red: 1.000, green: 0.678, blue: 0.482, opacity: 1)
    public static let colorGradientText = Color(red: 0.000, green: 0.000, blue: 0.000, opacity: 1)
    public static let dismissButtonSizeLargeActionWrapperCompositionBorderRadius = 4
    public static let dismissButtonSizeLargeActionWrapperCompositionSpacing = 4
    public static let dismissButtonSizeLargeContainerCompositionSizing = 20
    public static let dismissButtonSizeLargeContainerCompositionSpacing = 0
    public static let dismissButtonSizeMediumActionWrapperCompositionBorderRadius = 4
    public static let dismissButtonSizeMediumActionWrapperCompositionSpacing = 2
    public static let dismissButtonSizeMediumContainerCompositionSizing = 20
    public static let dismissButtonSizeMediumContainerCompositionSpacing = 0
    public static let dismissButtonVariantDefaultStateActiveBackgroundColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let dismissButtonVariantDefaultStateEnabledIconColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let dismissButtonVariantDefaultStateHoverBackgroundColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let dividerSizeDefaultHorizontalRuleCompositionHeight = 1
    public static let dividerSizeDefaultHorizontalRuleCompositionVerticalPadding = 4
    public static let dividerVariantDefaultBackgroundBackgroundColor = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let iconSizeLCompositionSizing = 24
    public static let iconSizeMCompositionSizing = 20
    public static let iconSizeSCompositionSizing = 16
    public static let iconSizeXlCompositionSizing = 32
    public static let iconSizeXsCompositionSizing = 12
    public static let iconSizeXxlCompositionSizing = 48
    public static let iconSizeXxxlCompositionSizing = 56
    public static let iconVariantDefaultColorAccent = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let iconVariantDefaultColorDanger = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let iconVariantDefaultColorDisabled = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let iconVariantDefaultColorNeutral = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let iconVariantDefaultColorNeutralFaded = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let iconVariantDefaultColorOnInteractive = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let iconVariantDefaultColorOnPrimary = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let iconVariantDefaultColorSuccess = Color(red: 0.651, green: 0.894, blue: 0.741, opacity: 1)
    public static let iconVariantDefaultColorWarning = Color(red: 1.000, green: 0.678, blue: 0.482, opacity: 1)
    public static let linkButtonSizeLCompositionBorderRadius = 4
    public static let linkButtonSizeLCompositionHorizontalPadding = 0
    public static let linkButtonSizeLCompositionSpacing = 4
    public static let linkButtonSizeLCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 17)
    public static let linkButtonSizeLCompositionVerticalPadding = 4
    public static let linkButtonSizeMCompositionBorderRadius = 4
    public static let linkButtonSizeMCompositionHeight = 44
    public static let linkButtonSizeMCompositionHorizontalPadding = 0
    public static let linkButtonSizeMCompositionSpacing = 4
    public static let linkButtonSizeMCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let linkButtonSizeSCompositionBorderRadius = 4
    public static let linkButtonSizeSCompositionHeight = 32
    public static let linkButtonSizeSCompositionHorizontalPadding = 0
    public static let linkButtonSizeSCompositionSpacing = 4
    public static let linkButtonSizeSCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let linkButtonVariantDestructiveStateActiveContentColor = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let linkButtonVariantDestructiveStateDisabledContentColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let linkButtonVariantDestructiveStateEnabledContentColor = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let linkButtonVariantDestructiveStateHoverContentColor = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let linkButtonVariantPrimaryStateActiveContentColor = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let linkButtonVariantPrimaryStateDisabledContentColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let linkButtonVariantPrimaryStateEnabledContentColor = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let linkButtonVariantPrimaryStateHoverContentColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let linkSizeDefaultStateActiveCompositionBorderRadius = 4
    public static let linkSizeDefaultStateActiveCompositionTextDecoration = "underline"
    public static let linkSizeDefaultStateDefaultCompositionBorderRadius = 4
    public static let linkSizeDefaultStateHoverCompositionBorderRadius = 4
    public static let linkSizeDefaultStateHoverCompositionTextDecoration = "underline"
    public static let linkVariantLoudStateActiveTextColor = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let linkVariantLoudStateDefaultTextColor = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let linkVariantLoudStateHoverTextColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let linkVariantLoudStateVisitedTextColor = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let loaderVariantInlineDarkContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let loaderVariantInlineLightContentColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let mb0 = 0
    public static let mb100 = 8
    public static let mb200 = 12
    public static let mb300 = 16
    public static let mb400 = 20
    public static let mb50 = 2
    public static let mb500 = 24
    public static let mb600 = 32
    public static let mb75 = 4
    public static let menuItemSizeDefaultContainerCompositionBorderRadius = 4
    public static let menuItemSizeDefaultContainerCompositionHorizontalPadding = 12
    public static let menuItemSizeDefaultContainerCompositionItemSpacing = 8
    public static let menuItemSizeDefaultContainerCompositionVerticalPadding = 8
    public static let menuItemSizeDefaultTextBoldCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let menuItemSizeDefaultTextDefaultCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 20, fontSize: 15)
    public static let menuItemVariantDefaultStateActiveContainerBackground = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let menuItemVariantDefaultStateActiveTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let menuItemVariantDefaultStateDisabledTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let menuItemVariantDefaultStateEnabledTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let menuItemVariantDefaultStateHoverContainerColor = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let menuItemVariantDefaultStateHoverTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let menuListSizeDefaultHeaderContainerCompositionBorderRadius = 4
    public static let menuListSizeDefaultHeaderContainerCompositionHorizontalPadding = 12
    public static let menuListSizeDefaultHeaderContainerCompositionItemSpacing = 8
    public static let menuListSizeDefaultHeaderContainerCompositionPaddingBottom = 8
    public static let menuListSizeDefaultHeaderContainerCompositionPaddingTop = 16
    public static let menuListSizeDefaultHeaderTextCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 17)
    public static let menuListVariantDefaultHeaderTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let popoverSizeDefaultContainerCompositionBorderRadius = 8
    public static let popoverSizeDefaultContainerCompositionBorderWidth = 1
    public static let popoverSizeDefaultContainerCompositionBoxShadow = [BoxShadow(x: 0, y: 4, blur: 8, spread: 0, color: Color(red: 0.020, green: 0.035, blue: 0.078, opacity: 1).opacity(0.04)), BoxShadow(x: 0, y: 12, blur: 20, spread: 0, color: Color(red: 0.020, green: 0.035, blue: 0.078, opacity: 1).opacity(0.08))]
    public static let popoverSizeDefaultContainerCompositionHorizontalPadding = 12
    public static let popoverSizeDefaultContainerCompositionItemSpacing = 0
    public static let popoverSizeDefaultContainerCompositionVerticalPadding = 12
    public static let popoverVariantDefaultContainerBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let popoverVariantDefaultContainerBorder = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let radioSizeDefaultContainerCompositionItemSpacing = 12
    public static let radioSizeDefaultContentWrapperCompositionVerticalPadding = 2
    public static let radioSizeDefaultDescriptionCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 16, fontSize: 15)
    public static let radioSizeDefaultEllipseCompositionBorderRadius = 999
    public static let radioSizeDefaultEllipseCompositionSizing = 12
    public static let radioSizeDefaultLabelWrapperCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 20, fontSize: 15)
    public static let radioSizeDefaultPrimitiveCompositionBorderRadius = 999
    public static let radioSizeDefaultPrimitiveCompositionBorderWidth = 1
    public static let radioSizeDefaultPrimitiveCompositionSizing = 24
    public static let radioVariantSelectedStateActiveEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateActivePrimitiveBackground = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let radioVariantSelectedStateActivePrimitiveBorder = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let radioVariantSelectedStateDisabledDescriptionTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantSelectedStateDisabledEllipseBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantSelectedStateDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantSelectedStateDisabledPrimitiveBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantSelectedStateDisabledPrimitiveBorder = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let radioVariantSelectedStateEnabledDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let radioVariantSelectedStateEnabledEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateEnabledPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateEnabledPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateErrorActiveDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let radioVariantSelectedStateErrorActiveEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateErrorActiveLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateErrorActivePrimitiveBackground = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let radioVariantSelectedStateErrorActivePrimitiveBorder = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let radioVariantSelectedStateErrorDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let radioVariantSelectedStateErrorEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateErrorHoverDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let radioVariantSelectedStateErrorHoverEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateErrorHoverLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateErrorHoverPrimitiveBackground = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let radioVariantSelectedStateErrorHoverPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let radioVariantSelectedStateErrorLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateErrorPrimitiveBackground = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let radioVariantSelectedStateErrorPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let radioVariantSelectedStateHoverEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateHoverPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let radioVariantSelectedStateHoverPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let radioVariantUnselectedStateActiveEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantUnselectedStateActivePrimitiveBackground = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let radioVariantUnselectedStateActivePrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let radioVariantUnselectedStateDisabledDescriptionTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantUnselectedStateDisabledEllipseBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantUnselectedStateDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantUnselectedStateDisabledPrimitiveBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let radioVariantUnselectedStateDisabledPrimitiveBorder = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let radioVariantUnselectedStateEnabledDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let radioVariantUnselectedStateEnabledEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantUnselectedStateEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantUnselectedStateEnabledPrimitiveBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantUnselectedStateEnabledPrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let radioVariantUnselectedStateErrorActiveEllipseBackground = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let radioVariantUnselectedStateErrorActivePrimitiveBackground = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let radioVariantUnselectedStateErrorActivePrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let radioVariantUnselectedStateErrorEllipseBackground = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let radioVariantUnselectedStateErrorHoverEllipseBackground = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let radioVariantUnselectedStateErrorHoverPrimitiveBackground = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let radioVariantUnselectedStateErrorHoverPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let radioVariantUnselectedStateErrorPrimitiveBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantUnselectedStateErrorPrimitiveBorder = Color(red: 0.894, green: 0.353, blue: 0.455, opacity: 1)
    public static let radioVariantUnselectedStateHoverEllipseBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let radioVariantUnselectedStateHoverPrimitiveBackground = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let radioVariantUnselectedStateHoverPrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let selectionChipSizeLargeContainerCompositionBorderRadius = 999
    public static let selectionChipSizeLargeContainerCompositionBorderWidth = 1
    public static let selectionChipSizeLargeContainerCompositionHeight = 40
    public static let selectionChipSizeLargeContainerCompositionHorizontalPadding = 16
    public static let selectionChipSizeLargeContainerCompositionItemSpacing = 8
    public static let selectionChipSizeLargeLabelCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let selectionChipSizeMediumContainerCompositionBorderRadius = 999
    public static let selectionChipSizeMediumContainerCompositionBorderWidth = 1
    public static let selectionChipSizeMediumContainerCompositionHeight = 40
    public static let selectionChipSizeMediumContainerCompositionHorizontalPadding = 12
    public static let selectionChipSizeMediumLabelCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let selectionChipVariantPrimaryStateSelectedActiveContainerBackgroundColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedActiveContainerBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedActiveContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1).opacity(1))
    public static let selectionChipVariantPrimaryStateSelectedDisabledContainerBackgroundColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedDisabledContainerBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedDisabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1).opacity(1))
    public static let selectionChipVariantPrimaryStateSelectedDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedEnabledContainerBackgroundColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedEnabledContainerBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedEnabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1).opacity(1))
    public static let selectionChipVariantPrimaryStateSelectedEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedHoverContainerBackgroundColor = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedHoverContainerBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let selectionChipVariantPrimaryStateSelectedHoverContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1).opacity(1))
    public static let selectionChipVariantPrimaryStateUnselectedActiveContainerBackgroundColor = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedActiveContainerBorderColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedActiveContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1).opacity(1))
    public static let selectionChipVariantPrimaryStateUnselectedDisabledContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedDisabledContainerBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedDisabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1).opacity(1))
    public static let selectionChipVariantPrimaryStateUnselectedDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedEnabledContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedEnabledContainerBorderColor = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedEnabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1).opacity(1))
    public static let selectionChipVariantPrimaryStateUnselectedEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedHoverContainerBackgroundColor = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedHoverContainerBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let selectionChipVariantPrimaryStateUnselectedHoverContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateSelectedActiveContainerBackgroundColor = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedActiveContainerBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedActiveContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 2, color: Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateSelectedDisabledContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedDisabledContainerBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedDisabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 2, color: Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateSelectedDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedEnabledContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedEnabledContainerBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedEnabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 2, color: Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateSelectedEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedHoverContainerBackgroundColor = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedHoverContainerBorderColor = Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1)
    public static let selectionChipVariantSecondaryStateSelectedHoverContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 2, color: Color(red: 0.063, green: 0.098, blue: 0.157, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateUnselectedActiveContainerBackgroundColor = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedActiveContainerBorderColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedActiveContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateUnselectedDisabledContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedDisabledContainerBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedDisabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateUnselectedDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedEnabledContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedEnabledContainerBorderColor = Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedEnabledContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.251, green: 0.278, blue: 0.325, opacity: 1).opacity(1))
    public static let selectionChipVariantSecondaryStateUnselectedEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedHoverContainerBackgroundColor = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedHoverContainerBorderColor = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let selectionChipVariantSecondaryStateUnselectedHoverContainerInnershadow = BoxShadow(x: 0, y: 0, blur: 0, spread: 1, color: Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1).opacity(1))
    public static let spacing0 = 0
    public static let spacing100 = 8
    public static let spacing1000 = 80
    public static let spacing200 = 12
    public static let spacing300 = 16
    public static let spacing400 = 20
    public static let spacing50 = 2
    public static let spacing500 = 24
    public static let spacing600 = 32
    public static let spacing700 = 40
    public static let spacing75 = 4
    public static let spacing800 = 48
    public static let spacing900 = 64
    public static let switchPrimitiveVariantPrimaryStateActiveEllipseScale = 0.8
    public static let switchPrimitiveVariantPrimaryStateEnabledEllipseDuration = 200
    public static let switchPrimitiveVariantPrimaryStateEnabledEllipseEasing = "ease-in-out"
    public static let switchPrimitiveVariantPrimaryStateEnabledEllipseScale = 0.8
    public static let switchSizeDefaultContainerCompositionItemSpacing = 12
    public static let switchSizeDefaultContentWrapperCompositionVerticalPadding = 2
    public static let switchSizeDefaultDescriptionCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 16, fontSize: 15)
    public static let switchSizeDefaultEllipseCompositionBorderRadius = 999
    public static let switchSizeDefaultEllipseCompositionHeight = 20
    public static let switchSizeDefaultEllipseCompositionWidth = 20
    public static let switchSizeDefaultLabelWrapperCompositionTypography = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 20, fontSize: 15)
    public static let switchSizeDefaultPrimitiveCompositionBorderRadius = 999
    public static let switchSizeDefaultPrimitiveCompositionBorderWidth = 1
    public static let switchSizeDefaultPrimitiveCompositionHeight = 24
    public static let switchSizeDefaultPrimitiveCompositionWidth = 44
    public static let switchVariantCheckedStateActivePrimitiveBackground = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let switchVariantCheckedStateActivePrimitiveBorder = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let switchVariantCheckedStateActivePrimitiveEllipse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStateDisabledDescriptionTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantCheckedStateDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantCheckedStateDisabledPrimitiveBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantCheckedStateDisabledPrimitiveBorder = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let switchVariantCheckedStateDisabledPrimitiveEllipse = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantCheckedStateEnabledDescriptionTextColor = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let switchVariantCheckedStateEnabledLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStateEnabledPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStateEnabledPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStateEnabledPrimitiveEllipse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStateHoverPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStateHoverPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStateHoverPrimitiveEllipse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStatePendingPrimitiveBackground = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStatePendingPrimitiveBorder = Color(red: 0.306, green: 0.631, blue: 1.000, opacity: 1)
    public static let switchVariantCheckedStatePendingPrimitiveEllipse = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let switchVariantUncheckedStateActivePrimitiveBackground = Color(red: 0.875, green: 0.875, blue: 0.906, opacity: 1)
    public static let switchVariantUncheckedStateActivePrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let switchVariantUncheckedStateActivePrimitiveEllipse = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let switchVariantUncheckedStateDisabledDescriptionTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantUncheckedStateDisabledLabelTextColor = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantUncheckedStateDisabledPrimitiveBackground = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantUncheckedStateDisabledPrimitiveBorder = Color(red: 0.718, green: 0.729, blue: 0.745, opacity: 1)
    public static let switchVariantUncheckedStateDisabledPrimitiveEllipse = Color(red: 0.529, green: 0.549, blue: 0.576, opacity: 1)
    public static let switchVariantUncheckedStateEnabledPrimitiveBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let switchVariantUncheckedStateEnabledPrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let switchVariantUncheckedStateEnabledPrimitiveEllipse = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let switchVariantUncheckedStateHoverPrimitiveBackground = Color(red: 0.949, green: 0.949, blue: 0.969, opacity: 1)
    public static let switchVariantUncheckedStateHoverPrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let switchVariantUncheckedStateHoverPrimitiveEllipse = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let switchVariantUncheckedStatePendingPrimitiveBackground = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let switchVariantUncheckedStatePendingPrimitiveBorder = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let switchVariantUncheckedStatePendingPrimitiveEllipse = Color(red: 0.835, green: 0.843, blue: 0.855, opacity: 1)
    public static let tagsSizeDefaultContainerCompositionHorizontalPadding = 8
    public static let tagsSizeDefaultContainerCompositionVerticalPadding = 4
    public static let tagsSizeDefaultLabelCompositionTypography = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 12, fontSize: 13)
    public static let tagsVariantBetaContainerBackgroundColor = Color(red: 0.804, green: 0.894, blue: 1.000, opacity: 1)
    public static let tagsVariantBetaContainerBorderColor = Color(red: 0.000, green: 0.294, blue: 0.624, opacity: 1)
    public static let tagsVariantBetaLabelTextColor = Color(red: 0.012, green: 0.478, blue: 1.000, opacity: 1)
    public static let tagsVariantDangerContainerBackgroundColor = Color(red: 0.549, green: 0.031, blue: 0.129, opacity: 1)
    public static let tagsVariantDangerContainerBorderColor = Color(red: 0.549, green: 0.031, blue: 0.129, opacity: 1)
    public static let tagsVariantDangerLabelTextColor = Color(red: 0.914, green: 0.482, blue: 0.565, opacity: 1)
    public static let tagsVariantNeutralContainerBackgroundColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let tagsVariantNeutralContainerBorderColor = Color(red: 0.376, green: 0.396, blue: 0.431, opacity: 1)
    public static let tagsVariantNeutralLabelTextColor = Color(red: 1.000, green: 1.000, blue: 1.000, opacity: 1)
    public static let tagsVariantPassiveContainerBackgroundColor = Color(red: 0.000, green: 0.380, blue: 0.255, opacity: 1)
    public static let tagsVariantPassiveContainerBorderColor = Color(red: 0.000, green: 0.380, blue: 0.255, opacity: 1)
    public static let tagsVariantPassiveLabelText = Color(red: 0.651, green: 0.894, blue: 0.741, opacity: 1)
    public static let tagsVariantPositiveContainerBackgroundColor = Color(red: 0.906, green: 0.925, blue: 0.996, opacity: 1)
    public static let tagsVariantPositiveContainerBorderColor = Color(red: 0.847, green: 0.878, blue: 0.992, opacity: 1)
    public static let tagsVariantPositiveLabelTextColor = Color(red: 0.310, green: 0.369, blue: 0.949, opacity: 1)
    public static let tagsVariantWarningContainerBackgroundColor = Color(red: 0.541, green: 0.345, blue: 0.051, opacity: 1)
    public static let tagsVariantWarningContainerBorderColor = Color(red: 0.541, green: 0.345, blue: 0.051, opacity: 1)
    public static let tagsVariantWarningLabelTextColor = Color(red: 1.000, green: 0.678, blue: 0.482, opacity: 1)
    public static let typographyBodyBody100 = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 20, fontSize: 15)
    public static let typographyBodyBody200 = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 24, fontSize: 17)
    public static let typographyBodyBody300 = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 28, fontSize: 20)
    public static let typographyHeaderDisplay100 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 44, fontSize: 32)
    public static let typographyHeaderDisplay150 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 0, fontSize: 10)
    public static let typographyHeaderDisplay200 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 64, fontSize: 48)
    public static let typographyHeaderDisplay300 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 0, fontSize: 10)
    public static let typographyHeaderTitle100 = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 12, fontSize: 13)
    public static let typographyHeaderTitle200 = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let typographyHeaderTitle250 = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 24, fontSize: 17)
    public static let typographyHeaderTitle300 = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 17)
    public static let typographyHeaderTitle400 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 24, fontSize: 20)
    public static let typographyHeaderTitle500 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 32, fontSize: 24)
    public static let typographyHeaderTitle600 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 40, fontSize: 28)
    public static let typographyHeaderTitle700 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 0, fontSize: 10)
    public static let typographyHeaderTitle800 = Typography(fontFamily: "muli", fontWeight: 800, lineHeight: 0, fontSize: 10)
    public static let typographyUtilityBadge = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 12, fontSize: 13)
    public static let typographyUtilityHelper = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 16, fontSize: 15)
    public static let typographyUtilityLabel100 = Typography(fontFamily: "muli", fontWeight: 400, lineHeight: 20, fontSize: 15)
    public static let typographyUtilityLabel200 = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 15)
    public static let typographyUtilityLabel300 = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 20, fontSize: 17)
    public static let typographyUtilityMicro = Typography(fontFamily: "muli", fontWeight: 700, lineHeight: 12, fontSize: 10)
}
